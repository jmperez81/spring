<?xml version="1.0" encoding="UTF-8"?>
<!-- TODO 1: import the util schema so you can use tags in the 'util' namespace -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd">

	<!-- 
		Contains alternate definitions of the test data source to gain experience with tags in the <util:/> namespace.
		
		Each bean should be configured with the same properties, just in a different way described by the TODOs.
		The properties are:
			testDatabaseName=rewards
  		    schemaLocation=classpath:rewards/testdb/schema.sql
			testDataLocation=classpath:rewards/testdb/test-data.sql
			
		Run AlternateDataSourceConfigTests to verify you configured each bean correctly.
		Each bean is configured for lazy initialization so it will only be created when used by its test.
			This will let you verify on a bean-by-bean basis you configured things correctly.
	-->
	
	<!-- Creates a data source by calling a static factory method that accepts a java.util.List -->
	<bean id="dataSource-createdFromList" class="org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean" lazy-init="true">
		<!-- TODO 1: set the 'databaseName' property to the the correct value -->
		<property name="databaseName" value="rewards"/>
		<property name="databasePopulator">
			<bean class="org.springframework.jdbc.datasource.init.ResourceDatabasePopulator">
				<!--  TODO 2: set the 'scripts' property of the DatabasePopulator to a list containing 
								the string values for the schema and test data locations -->
				<property name="scripts">
					<util:list>
						<value>classpath:rewards/testdb/schema.sql</value>
						<value>classpath:rewards/testdb/test-data.sql</value>
					</util:list>
				</property>
			</bean>
		</property>
	</bean>

	<!-- Creates a data source by calling the factory bean's constructor, setting its properties from constants, then calling getObject() -->
	<bean id="dataSource-createdFromConstants" class="org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseFactoryBean" lazy-init="true">
		<!-- TODO 3: set the 'databaseName' property to the 'rewards.testdb.config.Constants.TEST_DATABASE_NAME' constant -->
		<property name="databasePopulator">
			<bean class="org.springframework.jdbc.datasource.init.ResourceDatabasePopulator">
				<!-- TODO 4: set the 'scripts' property of the DatabasePopulator to a list containing the
								'rewards.testdb.config.Constants.SCHEMA_LOCATION' constant and the 
								'rewards.testdb.config.Constants.TEST_DATA_LOCATION' constant -->
				<property name="scripts">
					<util:list>
						<util:constant static-field="rewards.testdb.config.Constants.SCHEMA_LOCATION"/>
						<util:constant static-field="rewards.testdb.config.Constants.TEST_DATA_LOCATION"/>
					</util:list>
				</property>
			</bean>
		</property>
	</bean>

	<!-- Creates a data source by calling a static factory method that accepts a java.util.Map -->
	<bean id="dataSource-createdFromMap" class="rewards.testdb.TestDataSourceFactory" lazy-init="true" factory-method="createDataSourceFromMap">
		<!-- TODO 5: add the "factory-method" attribute to invoke createDataSourceFromMap and pass in a Map as the argument -->
		<constructor-arg name="properties">
			<util:map>
				<entry key="testDatabaseName"><util:constant static-field="rewards.testdb.config.Constants.TEST_DATABASE_NAME"/></entry>
				<entry key="schemaLocation"><util:constant static-field="rewards.testdb.config.Constants.SCHEMA_LOCATION"/></entry>
				<entry key="testDataLocation"><util:constant static-field="rewards.testdb.config.Constants.TEST_DATA_LOCATION"/></entry>
			</util:map>
		</constructor-arg>
	</bean>

	<!-- Creates a data source by calling a static factory method that accepts a java.util.Properties -->
	<bean id="dataSource-createdFromProperties" class="rewards.testdb.TestDataSourceFactory" lazy-init="true" factory-method="createDataSourceFromProperties">
		<!-- TODO 6: add the "factory-method" attribute to invoke createDataSourceFromProperties and 
						pass in a Properties object loaded from a properties file as an argument to the factory method -->
		<constructor-arg name="properties">
			<util:properties location="classpath:rewards/testdb/testdb.properties"/>		
		</constructor-arg>
	</bean>	
</beans>
